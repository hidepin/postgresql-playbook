---
# file: roles/postgresql/tasks/main.yml
- name: postgresql repo install
  yum:
    name: "https://download.postgresql.org/pub/repos/yum/{{ pgdg_version|regex_replace('-.*', '') }}/redhat/rhel-{{ ansible_distribution_major_version }}-x86_64/pgdg-{{ ansible_distribution|lower }}{{ pgdg_version|regex_replace('-.*', '')|regex_replace('\\.', '') }}-{{ pgdg_version }}.noarch.rpm"
    state: present
  register: result
  until: result | success
  retries: 3
  delay: 5

- name: postgresql packages install
  package:
    name: "{{item}}"
    state: present
  with_items:
    "{{ postgresql_pkg }}"
  register: result
  until: result | success
  retries: 3
  delay: 5

- name: pg_statsinfo install
  yum:
    name: "https://downloads.sourceforge.net/project/pgstatsinfo/pg_statsinfo/{{ pg_statsinfo_version|regex_replace('-.*', '') }}/pg_statsinfo-{{ pg_statsinfo_version }}.pg{{ pgdg_version|regex_replace('-.*', '')|regex_replace('\\.', '') }}.rhel{{ ansible_distribution_major_version }}.x86_64.rpm"
    state: present
  register: result
  until: result | success
  retries: 3
  delay: 5
  when: "{{ groups['postgresql_with_pg_statsinfo_repodb']|length }} != 0"

- name: register pg_store_plans url
  include: pg_store_plans_url.yml
  when: pg_store_plans_enabled

- name: pg_store_plans install
  yum:
    name: "{{ pg_store_plans_url }}"
    state: present
  register: result
  until: result | success
  retries: 3
  delay: 5
  when: pg_store_plans_enabled

- name: register pg_hint_plan url
  include: pg_hint_plan_url.yml
  when: pg_hint_plan_enabled

- name: pg_hint_plan install
  yum:
    name: "{{ pg_hint_plan_url }}"
    state: present
  register: result
  until: result | success
  retries: 3
  delay: 5
  when: pg_hint_plan_enabled

- block:
  - name: (rhel) epel install
    yum:
      name: "https://dl.fedoraproject.org/pub/epel/{{ ansible_distribution_major_version }}/x86_64/{{ (ansible_distribution_major_version == '7')|ternary('e/','') }}epel-release-{{ epel_version }}.noarch.rpm"
      state: present
    register: result
    until: result | success
    retries: 3
    delay: 5
    when: ansible_distribution == "RedHat"

  - name: (centos) epel install
    yum:
      name: epel-release
      state: present
    register: result
    until: result | success
    retries: 3
    delay: 5
    when: ansible_distribution == "CentOS"

  - name: postgis2 packages install
    package:
      name: "postgis2_{{ pgdg_version|regex_replace('-.*', '')|regex_replace('\\.', '') }}"
      state: present
    register: result
    until: result | success
    retries: 3
    delay: 5

  when: postgis2_enabled

- name: create postgresql dir
  file:
    path: "{{item.path}}"
    owner: "{{item.owner}}"
    group: "{{item.group}}"
    mode: "{{item.mode}}"
    state: directory
  with_items:
    - { path: "{{ postgresql_top_dir }}", owner: 'postgres', group: 'postgres', mode: '0700' }
    - { path: "{{ postgresql_top_dir }}/pgdata", owner: 'postgres', group: 'postgres', mode: '0700' }
    - { path: "{{ postgresql_top_dir }}/pgxlog", owner: 'postgres', group: 'postgres', mode: '0700' }
    - { path: "{{ postgresql_top_dir }}/pgarch", owner: 'postgres', group: 'postgres', mode: '0700' }
    - { path: "{{ postgresql_top_dir }}/pgarch/arc1", owner: 'postgres', group: 'postgres', mode: '0700' }
    - { path: "/var/log/postgresql", owner: 'postgres', group: 'postgres', mode: '0755' }

- name: postgresql initdb
  command: su - postgres -c "/usr/pgsql-{{ pgdg_version|regex_replace('-.*', '') }}/bin/initdb -D {{ postgresql_top_dir }}/pgdata/data -X {{ postgresql_top_dir }}/pgxlog/pg_xlog --encoding=UTF-8 --no-locale"
  args:
    creates: "{{ postgresql_top_dir }}/pgdata/data/PG_VERSION"

- block:
  - name: postgres bash profile
    template:
      src: dot_bash_profile.j2
      dest: /var/lib/pgsql/.bash_profile
      owner: postgres
      group: postgres
      mode: 0700
      backup: yes
    register: is_dot_bash_profile_setting
    notify: postgresql restart

  - name: postgres sysconfig setting
    template:
      src: etc_sysconfig_pgsql_postgresql.j2
      dest: "/etc/sysconfig/pgsql/postgresql-{{ pgdg_version|regex_replace('-.*', '') }}"
      owner: root
      group: root
      mode: 0644
      backup: yes
    register: is_etc_sysconfig_pgsql_postgresql_setting
    notify: postgresql restart
    when: ansible_distribution_major_version == "6"

  - name: create postgresql systemd dir
    file:
      path: "/etc/systemd/system/postgresql-{{ pgdg_version|regex_replace('-.*', '') }}.service.d"
      state: directory
      owner: root
      group: root
      mode: 0755
    when: ansible_distribution_major_version == "7"

  - name: postgresql PGDATA settings
    template:
      src: local.conf.j2
      dest: "/etc/systemd/system/postgresql-{{ pgdg_version|regex_replace('-.*', '') }}.service.d/local.conf"
      owner: root
      group: root
      mode: 0644
      backup: yes
    register: is_systemd_pgdata_setting
    notify: postgresql restart
    when: ansible_distribution_major_version == "7"

  - name: vm.nr_hugepages check
    command: sysctl -n vm.nr_hugepages
    register: vm_nr_hugepages
    changed_when: false

  - name: postgresql.conf settings
    template:
      src: "postgresql.conf.j2"
      dest: "{{ postgresql_top_dir }}/pgdata/data/postgresql.conf"
      owner: postgres
      group: postgres
      mode: 0600
      backup: yes
    register: is_postgresql_conf_setting
    notify: postgresql restart

  - name: pg_hba.conf settings
    template:
      src: "pg_hba.conf.j2"
      dest: "{{ postgresql_top_dir }}/pgdata/data/pg_hba.conf"
      owner: postgres
      group: postgres
      mode: 0600
      backup: yes
    register: is_pg_hba_conf_setting
    notify: postgresql restart

  always:
  - name: postgresql backup settings
    include: backup.yml
    with_flattened:
      - "{{ is_dot_bash_profile_setting|default() }}"
      - "{{ is_etc_sysconfig_pgsql_postgresql_setting|default() }}"
      - "{{ is_systemd_pgdata_setting|default() }}"
      - "{{ is_postgresql_conf_setting|default() }}"
      - "{{ is_pg_hba_conf_setting|default() }}"
    loop_control:
      loop_var: backup_item

- name: postgresql start
  service:
    name: "postgresql-{{ pgdg_version|regex_replace('-.*', '') }}.service"
    state: started
    enabled: yes
    daemon_reload: yes

- block:
  - name: statsinfo user check
    command: "/usr/pgsql-{{ pgdg_version|regex_replace('-.*', '') }}/bin/psql -U postgres -d postgres -t -c \"SELECT usename FROM pg_user WHERE usename = '{{ pg_statsinfo_user }}'\""
    register: statsinfo_user_check
    changed_when: false

  - name: statsinfo user add
    command: "/usr/pgsql-{{ pgdg_version|regex_replace('-.*', '') }}/bin/createuser -U postgres -S -d -R {{ pg_statsinfo_user }}"
    when: statsinfo_user_check.stdout == ''

  - name: stats database check
    command: "/usr/pgsql-{{ pgdg_version|regex_replace('-.*', '') }}/bin/psql -U postgres -d postgres -t -c \"SELECT datname FROM pg_database WHERE datname = '{{ pg_statsinfo_database }}'\""
    register: statsinfo_database_check
    changed_when: false

  - name: stats database add
    command: "/usr/pgsql-{{ pgdg_version|regex_replace('-.*', '') }}/bin/createdb -U {{ pg_statsinfo_user }} {{ pg_statsinfo_database }}"
    when: statsinfo_database_check.stdout == ''

  when: "'postgresql_with_pg_statsinfo_repodb' in group_names"

- block:
  - name: add archive_remove_pglog.sh
    template:
      src: archive_remove_pglog.sh.j2
      dest: "/usr/pgsql-{{ pgdg_version|regex_replace('-.*', '') }}/bin/archive_remove_pglog.sh"
      owner: root
      group: root
      mode: 0755
      backup: yes
    register: is_archive_remove_pglog_setting

  always:
  - name: pg_statsinfo backup settings
    include: backup.yml
    with_flattened:
      - "{{ is_archive_remove_pglog_setting|default() }}"
    loop_control:
      loop_var: backup_item

  when: "{{ groups['postgresql_with_pg_statsinfo_repodb']|length }} != 0"

- block:
  - name: pg_stat_statement enabled check
    command: "/usr/pgsql-{{ pgdg_version|regex_replace('-.*', '') }}/bin/psql -U postgres -d postgres -t -c \"SELECT extname FROM pg_extension WHERE extname = 'pg_stat_statements'\""
    register: pg_stat_statement_enabled
    changed_when: false

  - name: pg_stat_statement enabled
    command: "/usr/pgsql-{{ pgdg_version|regex_replace('-.*', '') }}/bin/psql -U postgres -d postgres -c \"CREATE EXTENSION pg_stat_statements\""
    when: pg_stat_statement_enabled.stdout == ''

  when: pg_stat_statement_enabled

- block:
  - name: pg_store_plans repo db enabled check
    command: "/usr/pgsql-{{ pgdg_version|regex_replace('-.*', '') }}/bin/psql -U postgres -d stats -t -c \"SELECT extname FROM pg_extension WHERE extname = 'pg_store_plans'\""
    register: pg_store_plans_repo_db_enabled
    changed_when: false
    when: "'postgresql_with_pg_statsinfo_repodb' in group_names"

  - name: pg_store_plans repo db enabled
    command: "/usr/pgsql-{{ pgdg_version|regex_replace('-.*', '') }}/bin/psql -U postgres -d stats -c \"CREATE EXTENSION pg_store_plans\""
    when: "'postgresql_with_pg_statsinfo_repodb' in group_names and pg_store_plans_repo_db_enabled.stdout == ''"

  - name: pg_store_plans enabled check
    command: "/usr/pgsql-{{ pgdg_version|regex_replace('-.*', '') }}/bin/psql -U postgres -d postgres -t -c \"SELECT extname FROM pg_extension WHERE extname = 'pg_store_plans'\""
    register: pg_store_plans_enabled
    changed_when: false

  - name: pg_store_plans enabled
    command: "/usr/pgsql-{{ pgdg_version|regex_replace('-.*', '') }}/bin/psql -U postgres -d postgres -c \"CREATE EXTENSION pg_store_plans\""
    when: pg_store_plans_enabled.stdout == ''

  when: "{{ groups['postgresql_with_pg_statsinfo_repodb']|length }} != 0"
